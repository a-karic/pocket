# This is an autogenerated file for dynamic methods in Client
# Please rerun bundle exec rake rails_rbi:models[Client] to regenerate.

# typed: strong
module Client::EnumInstanceMethods
  sig { returns(T::Boolean) }
  def active?; end

  sig { void }
  def active!; end

  sig { returns(T::Boolean) }
  def inactive?; end

  sig { void }
  def inactive!; end
end

module Client::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Client::GeneratedAttributeMethods
  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(String)) }
  def description; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def description=(value); end

  sig { returns(T::Boolean) }
  def description?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(String)) }
  def name; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def name=(value); end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(T.nilable(Date)) }
  def start_of_trial; end

  sig { params(value: T.nilable(Date)).void }
  def start_of_trial=(value); end

  sig { returns(T::Boolean) }
  def start_of_trial?; end

  sig { returns(T.nilable(String)) }
  def status; end

  sig { params(value: T.nilable(T.any(Integer, String, Symbol))).void }
  def status=(value); end

  sig { returns(T::Boolean) }
  def status?; end

  sig { returns(T.nilable(Integer)) }
  def trial_days; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def trial_days=(value); end

  sig { returns(T::Boolean) }
  def trial_days?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end
end

class Client::Status < T::Enum
  enums do
    Active = new(%q{active})
    Inactive = new(%q{inactive})
  end

end

module Client::GeneratedAssociationMethods
  sig { returns(::Person::ActiveRecord_Associations_CollectionProxy) }
  def people; end

  sig { returns(T::Array[Integer]) }
  def person_ids; end

  sig { params(value: T::Enumerable[::Person]).void }
  def people=(value); end
end

module Client::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Client]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Client]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Client]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(Client)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Client) }
  def find_by_id!(id); end
end

class Client < ApplicationRecord
  include Client::EnumInstanceMethods
  include Client::GeneratedAttributeMethods
  include Client::GeneratedAssociationMethods
  extend Client::CustomFinderMethods
  extend Client::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Client::ActiveRecord_Relation, Client::ActiveRecord_Associations_CollectionProxy, Client::ActiveRecord_AssociationRelation) }

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.statuses; end

  sig { returns(T.nilable(Client::Status)) }
  def typed_status; end

  sig { params(value: T.nilable(Client::Status)).void }
  def typed_status=(value); end
end

module Client::QueryMethodsReturningRelation
  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def active(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def inactive(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def not_active(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def not_inactive(*args); end

  sig { returns(Client::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Client::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Client::ActiveRecord_Relation) }
  def extending(*args, &block); end
end

module Client::QueryMethodsReturningAssociationRelation
  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def active(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def inactive(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def not_active(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def not_inactive(*args); end

  sig { returns(Client::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Client::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Client::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Client::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end
end

class Client::ActiveRecord_Relation < ActiveRecord::Relation
  include Client::ActiveRelation_WhereNot
  include Client::CustomFinderMethods
  include Client::QueryMethodsReturningRelation
  Elem = type_member(fixed: Client)
end

class Client::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Client::ActiveRelation_WhereNot
  include Client::CustomFinderMethods
  include Client::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Client)
end

class Client::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Client::CustomFinderMethods
  include Client::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Client)

  sig { params(records: T.any(Client, T::Array[Client])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Client, T::Array[Client])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Client, T::Array[Client])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Client, T::Array[Client])).returns(T.self_type) }
  def concat(*records); end
end
